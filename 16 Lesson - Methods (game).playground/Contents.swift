print("15 Lesson - Methods")

/* –í –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–¥–µ–ª–∞—Ç—å –∏–≥—Ä—É, –≥–¥–µ —É–ø—Ä–∞–≤–ª—è–µ—à—å –º—É–∂–∏–∫–æ–º –∏ —Ç–æ–ª–∫–∞–µ—à—å —Å–µ—Ä–¥—Ü–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ (—Å–µ—Ä–¥—Ü–µ —Å –±–∞–Ω—Ç–∏–∫–æ–º). –ú–∞—Å—Å–∏–≤–æ–º –∑–∞–¥–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–π.
 1. –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –∫–æ–º–Ω–∞—Ç–∞ (–≤—ã—Å–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞)
 2. –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö, —É)
 3. –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –Ω–µ–π
 4. –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É –º–µ—Ç–æ–¥ –∏–¥—Ç–∏ (–ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ enum - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
 5. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã (x  –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è)
 6. –°–æ–∑–¥–∞—Ç—å —è—â–∏–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ x, y (—è—â–∏–∫ —Ç–æ–∂–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã)
 7. –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å, –∫—É–¥–∞ —è—â–∏–∫ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–µ—Å—Ç–∏
 */


enum Symbols : String{
    case empty = " ‚¨úÔ∏è"
    case wall  = " üü•"
    case person = " üòä"
    case finishPoint = " üü©"
    case box = " üì¶"
}

enum Direction : String {
    case right, left, up, down
}

class Room {
    let height : Int
    let width : Int
    var roomArray = [[Symbols]]()
    
    init(heght: Int, width: Int) {
        self.height = heght
        self.width = width
        
        for _ in 0..<height {
            var line = [Symbols]()
            for _ in 0..<width{
                line.append(.empty)
            }
            self.roomArray.append(line)
        }
    }
    
    func show() {
        let wallSymbol = Symbols.wall.rawValue
        let topLine = String.init(repeating: wallSymbol, count: width + 2)
        print(topLine)
        for line in roomArray {
            var stringLine = wallSymbol

            for value in line {
                stringLine += value.rawValue
            }
            stringLine += wallSymbol
            print(stringLine)
        }
        print(topLine)
    }
}

class Box {
    var x : Int
    var y : Int
    let xFinish : Int
    let yFinish : Int
    let room : Room
    
    init(x: Int, y: Int, xFinish: Int, yFinish: Int, room: Room) {
        self.x = x
        self.y = y
        self.xFinish = xFinish
        self.yFinish = yFinish
        self.room = room
        
        room.roomArray[y][x] = .box
        room.roomArray[yFinish][xFinish] = .finishPoint
    }
    
    func isFinish() -> Bool {
        if x == xFinish && y == yFinish {
            print("You win!")
            return true
        }
        return false
    }
    
    func move(direction: Direction) -> Bool {
        if isFinish() {
            return false
        }
        var newX = x
        var newY = y
        print("Box moved ", direction.rawValue)
        
        switch(direction) {
        case .up:
            if y <= 0{
                return false
            }
            newY -= 1
        case .down:
            if y >= room.height - 1 {
                return false
            }
            newY += 1
        case .right:
            if x >= room.width - 1{
                return false
            }
            newX += 1
        case .left:
            if x <= 0 {
                return false
            }
            newX -= 1
        }
        
        if newX != x || newY != y {
            room.roomArray[y][x] = .empty
            room.roomArray[newY][newX] = .box
            x = newX
            y = newY
        }
        
        isFinish()
        return true
        
    }
}

class Person {
    var x : Int
    var y : Int
    let room : Room
    let box : Box
    
    init(x: Int, y: Int, room: Room, box: Box) {
        self.x = x
        self.y = y
        self.room = room
        self.box = box
        room.roomArray[y][x] = .person
    }
    func move(direction: Direction) -> Bool {
        
        print("Player Move:", direction.rawValue)
        var newX = x
        var newY = y
        switch(direction) {
        case .up:
            if y <= 0{
                return false
            }
            newY -= 1
        case .down:
            if y >= room.height - 1 {
                return false
            }
            newY += 1
        case .right:
            if x >= room.width - 1{
                return false
            }
            newX += 1
        case .left:
            if x <= 0 {
                return false
            }
            newX -= 1
        }
        if room.roomArray[newY][newX] == Symbols.empty {
            room.roomArray[y][x] = .empty
            room.roomArray[newY][newX] = .person
            x = newX
            y = newY
            return true
        } else if room.roomArray[newY][newX] == Symbols.box {
            box.move(direction: direction)
            room.roomArray[y][x] = .empty
            room.roomArray[newY][newX] = .person
            x = newX
            y = newY
            return true
        }
        return false
    }
}

let room = Room(heght: 5, width: 5)
let box = Box(x: 3, y: 1, xFinish: 3, yFinish: 4, room: room)
let person = Person(x: 1, y: 1, room: room, box: box)
var moveArray = [Direction]()
moveArray = [.up, .right, .right, .down, .down, .down]
room.show()
for value in moveArray {
    person.move(direction: value)
    room.show()
}
